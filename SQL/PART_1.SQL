-- CREATED BY: BALAKUMARAN SIVANESAN
-- CREATION DATE: 08/27/2024
-- DESCRIPTION: PART 1: DATA INGESTION: 1. Upload the dataset in your storage account on Azure, 2. Ingest the data as external tables on Snowflake, 
-- 3. Transfer the data from external tables into tables with the following columns, 4. Create a final table called “table_youtube_final” by combining “table_youtube_trending” and  “table_youtube_category” on country and categoryid (be careful to not lose any records), while adding a new field called ideas by using the “UUID_STRING()” function.


-- CREATING A DATABASE FOR THE DATASETS
CREATE OR REPLACE DATABASE ASSIGNMENT_1;

-- CREATING A SCHEMA FOR THE DATABASE
CREATE OR REPLACE SCHEMA ASSIGNMENT_1SCHEMA;


-- CREATE STAGE OBJECT TO LET SNOWFLAKE KNOW FROM WHERE TO PICK THE FILES
CREATE OR REPLACE STAGE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.STAGE_ASSIGNMENT
URL = 'azure://balakumaran.blob.core.windows.net/youtube-datasets/'
CREDENTIALS = (AZURE_SAS_TOKEN = 'sv=2022-11-02&ss=bfqt&srt=co&sp=rwdlacupyx&se=2024-12-30T14:38:15Z&st=2024-09-01T07:38:15Z&spr=https&sig=6dhKYdqEVtrq2yxJJ5VfXbEbRT6wHdwUJfRUi2B5m9A%3D');

-- LISTING THE IMPORTED FILES FROM AZURE CONTAINERS
LIST @ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.STAGE_ASSIGNMENT;

-- CREATE FILE FORMAT TO INFORM SNOWFLAKE THAT WHICH FORMAT OF THE FILE TO EXPECT
CREATE
OR REPLACE FILE FORMAT ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.CSV_FORMAT 
TYPE = CSV 
FIELD_DELIMITER = ',' 
SKIP_HEADER = 1
NULL_IF = ('\\N', 'NULL', 'NUL', '')
FIELD_OPTIONALLY_ENCLOSED_BY = '"';

-- CREATING A EXTERNAL TABLE FOR YOUTUBE TRENDING CSV DATASETS
CREATE OR REPLACE EXTERNAL TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_TRENDING
WITH LOCATION = @ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.STAGE_ASSIGNMENT
FILE_FORMAT = ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.CSV_FORMAT
PATTERN ='.*[.]csv'
AUTO_REFRESH = TRUE;

-- DESCRIBE TABLE TO FETCH THE STRUCTURE OF THE TABLE TRENDING
DESC TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_TRENDING;

-- VERIFY THE EXTERNAL TABLE
SELECT * FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_TRENDING;

-- USING DATATYPES TO DEFINE THE STRUCTURE OF EACH COLUMN
CREATE OR REPLACE EXTERNAL TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_TRENDING
(
    VIDEO_ID STRING AS (value:c1::string),
    TITLE STRING AS (value:c2::string),
    PUBLISHEDAT TIMESTAMP AS (value:c3::timestamp),
    CHANNELID STRING AS (value:c4::string),
    CHANNELTITLE STRING AS (value:c5::string),
    CATEGORYID INT AS (value:c6::int),
    TRENDING_DATE TIMESTAMP AS (value:c7::timestamp),
    VIEW_COUNT INT AS (value:c8::int),
    LIKES INT AS (value:c9::int),
    DISLIKES INT AS (value:c10::int),
    COMMENT_COUNT INT AS (value:c11::int),
    COUNTRY STRING AS SUBSTRING(METADATA$FILENAME, 1, 2)
)
WITH LOCATION = @ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.STAGE_ASSIGNMENT
FILE_FORMAT = ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.CSV_FORMAT
PATTERN ='.*[.]csv';

-- VERIFY THE EXTERNAL TABLE STRUCTURE
SELECT * FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_TRENDING;

-- CREATING A REGULAR TABLE FOR YOUTUBE TRENDING CSV FILES
CREATE OR REPLACE TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_TRENDING AS
SELECT
    video_id,
    title,
    publishedAt,
    channelId,
    channelTitle,
    categoryId,
    trending_date,
    view_count,
    likes,
    dislikes,
    comment_count,
    country
FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_TRENDING;

-- VERIFY THE DATA
SELECT * FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_TRENDING; --2,667,041 RECORDS

------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                    ----- IMPORTING JSON FILES -----


-- CREATE FILE FORMAT TO INFORM SNOWFLAKE THAT WHICH FORMAT OF THE FILE TO EXPECT
CREATE OR REPLACE FILE FORMAT ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.JSON_FORMAT 
TYPE = JSON;

-- CREATING A EXTERNAL TABLE FOR YOUTUBE CATEGORY JSON FILES
CREATE OR REPLACE EXTERNAL TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_CATEGORY
WITH LOCATION = @ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.STAGE_ASSIGNMENT
FILE_FORMAT = (TYPE = JSON)
PATTERN ='.*[.]json'
AUTO_REFRESH = TRUE;

-- DESCRIBE TABLE TO FETCH THE STRUCTURE OF THE TABLE CATEGORY
DESC TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_CATEGORY;

-- VERIFY EXTERNAL TABLE YOUTUBE CATEGORY
SELECT * FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_CATEGORY;

-- EXTRACTING YOUTUBE CATEGORY DATA USING LATERAL FLATTEN
SELECT 
  l.value:id::string as CATEGORYID,
  l.value:snippet:title::string as CATEGORY_TITLE
FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_CATEGORY, LATERAL FLATTEN(value:items) l;

-- CREATING A REGULAR TABLE FOR YOUTUBE CATEGORY JSON FILES 
CREATE OR REPLACE TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_CATEGORY AS
SELECT 
    split_part(metadata$filename,'_', 1) AS COUNTRY,
    l.value:id::string as CATEGORYID,
    l.value:snippet:title::string as CATEGORY_TITLE
FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.EX_TABLE_YOUTUBE_CATEGORY,
LATERAL FLATTEN(value:items) l; -- Using LATERAL FLATTEN to extract and work with nested data.

-- VERIFY THE DATA
SELECT * FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_CATEGORY;  -- 311 RECORDS

---------------------------------------------------------------------------------------------------

-- CREATING A FINAL TABLE THAT HAS BOTH CSV AND JSON DATA COMBINED TOGETHER
CREATE OR REPLACE TABLE ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_FINAL AS
SELECT 
    UUID_STRING() AS id, -- adding a new field called id by using the “UUID_STRING()” function.
    yt.video_id AS VIDEO_ID,
    yt.title AS TITLE,
    yt.publishedAt AS PUBLISHEDAT,
    yt.channelId AS CHANNELID,
    yt.channelTitle AS CHANNELTITLE,
    yt.categoryId AS CATEGORYID,
    yc.category_title AS CATEGORY_TITLE,
    yt.trending_date AS TRENDING_DATE,
    yt.view_count AS VIEW_COUNT,
    yt.likes AS LIKES,
    yt.dislikes AS DISLIKES,
    yt.comment_count AS COMMENT_COUNT,
    yt.country AS COUNTRY,
    FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_TRENDING yt
LEFT JOIN ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_CATEGORY yc
ON yt.categoryId = yc.categoryId
AND yt.country = yc.country;  -- Combining the two tables on categoryid and country.

-- VERIFYING THE DATA FOR THE FINAL YOUTUBE TABLE
SELECT * FROM ASSIGNMENT_1.ASSIGNMENT_1SCHEMA.TABLE_YOUTUBE_FINAL; -- 2,667,041 Records


-- In Conclusion, This process involves downloading, uploading, and ingesting YouTube datasets (trending and category) into Snowflake, creating external and regular tables, and merging them to form a final table with unique identifiers. The goal for the part 1 is to ensure all records are accurately transferred, resulting in 2,667,041 rows in the final table, combining country and category IDs without losing data.
    
